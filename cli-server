#!/usr/bin/env node

var spawn = require('child_process').spawn,
    fs = require('fs'),
    path = require('path'),
    logo = fs.readFileSync(path.join(__dirname,'logo.txt'), 'utf8'),
    server = require('commander'),
    hostname = require('os').hostname(),
    package = require('./package.json');

var command = process.platform === 'win32' ? 'forever.cmd' : 'forever',
    node_command = process.platform === 'win32' ? 'node.cmd --es_staging' : 'node --es_staging';

server._name = 'adafruit-io server';

function install() {

  if(require('os').platform() !== 'linux')
    return console.error('[error]   running adafruit io as a service is only supported on linux');

  process.env.AIO_PORT = server.port || 8080;
  process.stdout.write(logo);
  console.log('[status]  starting service...');

  var child = spawn('forever-service', ['install', '-s', 'index.js', '--foreverOptions', '" -c node --es_staging"', '--start', 'aioserver'], {
    cwd: path.join(__dirname, 'server'),
    env: process.env,
    detached: true
  });

  console.log(`[status]  adafruit io is now ready at http://${hostname}:${process.env.AIO_PORT}/`);
  console.log(`[info]    documentation is available at http://${hostname}:${process.env.AIO_PORT}/api/docs\n`);

  child.on('error', console.log);

}

function remove() {

 if(require('os').platform() !== 'linux')
    return console.error('[error]   running adafruit io as a service is only supported on linux');

  var child = spawn('forever-service', ['delete', 'aioserver'], {
    cwd: path.join(__dirname, 'server'),
    env: process.env,
    detached: true
  });

  console.log('[status] stopping service...\n');

  child.on('error', console.log);

}

function start() {

  process.env.AIO_PORT = server.port || 8080;
  process.stdout.write(logo);
  console.log('[status]  starting server...');

  var child = spawn(command, ['start',  '-c', node_command, '-s', 'index.js'], {
    cwd: path.join(__dirname, 'server'),
    env: process.env,
    detached: true
  });

  console.log(`[status]  adafruit io is now ready at http://${hostname}:${process.env.AIO_PORT}/`);
  console.log(`[info]    documentation is available at http://${hostname}:${process.env.AIO_PORT}/api/docs\n`);

  child.on('error', console.log);

}

function restart() {

  var child = spawn(command, ['restart', 'index.js'], {
    cwd: path.join(__dirname, 'server'),
    env: process.env,
    detached: true
  });

  console.log('[status] restarting server...\n');

  child.on('error', console.log);

}

function stop() {

  var child = spawn(command, ['stop', 'index.js'], {
    cwd: path.join(__dirname, 'server'),
    env: process.env,
    detached: true
  });

  console.log('[status] stopping server...\n');

  child.on('error', console.log);

}

server.version(package.version);
server.option('-p, --port <n>', 'http port', parseInt);
server.command('install').description('installs server service (linux only)').action(install);
server.command('remove').description('removes server service (linux only)').action(remove);
server.command('start').description('starts server daemon').action(start);
server.command('restart').description('restarts server daemon').action(restart);
server.command('stop').description('stops server daemon').action(stop);
server.parse(process.argv);

if (!process.argv.slice(2).length)
  server.outputHelp();



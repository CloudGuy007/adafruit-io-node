'use strict';

// generated by: https://github.com/adafruit/io-swagger-templates
// using the Adafruit IO Swagger docs: https://io.adafruit.com/api/docs/api.json
const Controller = require('../../controller'),
      Data = require('../../models/Data');

class DataController extends Controller {

  static all(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value;

    Data.all(feedId)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static create(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value,
          group = req.swagger.params['group'].value;

    Data.create(feedId, group)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static last(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value;

    Data.last(feedId)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static next(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value;

    Data.next(feedId)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static previous(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value;

    Data.previous(feedId)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static receive(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value;

    Data.receive(feedId)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static send(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value,
          group = req.swagger.params['group'].value;

    Data.send(feedId, group)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static get(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value,
          id = req.swagger.params['id'].value;

    Data.get(feedId, id)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static replace(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value,
          id = req.swagger.params['id'].value,
          group = req.swagger.params['group'].value;

    Data.replace(feedId, id, group)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static destroy(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value,
          id = req.swagger.params['id'].value;

    Data.destroy(feedId, id)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

  static update(req, res, next) {

    const feedId = req.swagger.params['feed_id'].value,
          id = req.swagger.params['id'].value,
          group = req.swagger.params['group'].value;

    Data.update(feedId, id, group)
      .then(this.handleResponse.bind(this, res))
      .catch(this.handleError.bind(this, res));

  }

}

exports = module.exports = DataController;

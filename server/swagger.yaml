---
swagger: "2.0"
info:
  description: "The Internet of Things for Everyone"
  version: "1.0.0"
  title: "Adafruit IO"
host: "localhost"
basePath: "/api"
schemes:
- "http"
produces:
- "application/json"
- "application/xml"
- "text/csv"
paths:
  /feeds:
    get:
      tags:
      - "Feeds"
      summary: "All feeds for current user"
      description: "The Feeds endpoint returns information about the user's feeds.\
        \ The response includes the latest value of each feed, and other metadata\
        \ about each feed."
      operationId: "all"
      parameters:
      - name: "group_id"
        in: "query"
        description: "If the group_id is present, then this is a nested resource looking\
          \ for the feeds in a group."
        required: false
        type: "number"
      responses:
        200:
          description: "An array of feeds"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Feed"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Feeds"
      summary: "Create a new Feed"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "body"
        name: "feed"
        required: true
        schema:
          $ref: "#/definitions/Feed"
      responses:
        200:
          description: "New feed"
          schema:
            type: "object"
            properties: {}
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /feeds/{feed_id}/data:
    get:
      tags:
      - "Data"
      summary: "All data for current feed"
      description: " "
      parameters:
      - name: "feed_id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of data"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Data"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /feeds/{feed_id}/data/{data_id}:
    get:
      tags:
      - "Data"
      summary: ""
      description: "Returns data based on ID"
      operationId: "getDataById"
      parameters:
      - name: "feed_id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      - name: "data_id"
        in: "path"
        description: "ID, key, or name of data to use"
        required: true
        type: "string"
      responses:
        200:
          description: "Data response"
          schema:
            type: "object"
            properties: {}
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/Error"
  /feeds/{id}:
    get:
      tags:
      - "Feeds"
      summary: "Get feed by ID, Feed key, or Feed Name"
      description: "Returns feed based on ID"
      operationId: "get"
      parameters:
      - name: "id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      responses:
        200:
          description: "Feed response"
          schema:
            type: "object"
            properties: {}
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "Feeds"
      summary: "Replace an existing Feed"
      description: ""
      operationId: "replace"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      - in: "body"
        name: "feed"
        required: true
        schema:
          $ref: "#/definitions/Feed"
      responses:
        200:
          description: "Updated feed"
          schema:
            type: "object"
            properties: {}
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Feeds"
      summary: "Delete an existing Feed"
      description: ""
      operationId: "destroy"
      parameters:
      - name: "id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      responses:
        200:
          description: "Deleted feed successfully"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "Feeds"
      summary: "Update properties of an existing Feed"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      - in: "body"
        name: "feed"
        required: true
        schema:
          $ref: "#/definitions/Feed"
      responses:
        200:
          description: "Updated feed"
          schema:
            type: "object"
            properties: {}
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /groups:
    get:
      tags:
      - "Groups"
      summary: "All groups for current user"
      description: "The Groups endpoint returns information about the user's groups.\n\
        The response includes the latest value of each feed in the group, and other\n\
        metadata about the group.\n"
      parameters: []
      responses:
        200:
          description: "An array of groups"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      security:
      - HeaderKey: []
      - QueryKey: []
  /groups/{id}:
    get:
      tags:
      - "Groups"
      summary: "Get group by ID, key, or Name"
      description: "Returns group based on ID"
      operationId: "getGroupById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID, key, or name of feed to use"
        required: true
        type: "string"
      responses:
        200:
          description: "Group response"
          schema:
            type: "object"
            properties: {}
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/Error"
securityDefinitions:
  HeaderKey:
    type: "apiKey"
    name: "X-AIO-Key"
    in: "header"
  QueryKey:
    type: "apiKey"
    name: "X-AIO-Key"
    in: "query"
definitions:
  Group:
    properties:
      id:
        type: "number"
      name:
        type: "string"
      description:
        type: "string"
      source:
        type: "string"
      properties:
        type: "string"
      source_keys:
        type: "string"
      created_at:
        type: "string"
      updated_at:
        type: "string"
      feeds:
        type: "array"
        items:
          $ref: "#/definitions/Feed"
  Feed:
    type: "object"
    properties:
      id:
        type: "number"
        readOnly: true
      name:
        type: "string"
      key:
        type: "string"
      description:
        type: "string"
      unit_type:
        type: "string"
      unit_symbol:
        type: "string"
      visibility:
        type: "string"
        default: "private"
        enum:
        - "private"
        - "public"
      license:
        type: "string"
      enabled:
        type: "boolean"
        readOnly: true
      last_value:
        type: "string"
        readOnly: true
      status:
        type: "string"
        readOnly: true
      group_id:
        type: "number"
        readOnly: true
      created_at:
        type: "string"
        readOnly: true
      updated_at:
        type: "string"
        readOnly: true
  Data:
    required:
    - "value"
    properties:
      id:
        type: "number"
      value:
        type: "string"
      position:
        type: "string"
      feed_id:
        type: "number"
      group_id:
        type: "number"
      expiration:
        type: "string"
      lat:
        type: "number"
      lon:
        type: "number"
      ele:
        type: "number"
      completed_at:
        type: "string"
      created_at:
        type: "string"
      updated_at:
        type: "string"
      created_epoch:
        type: "number"
    example:
      value: 11
      lat: 30
      lng: -82
      ele: 42
  Error:
    properties:
      error:
        type: "string"
